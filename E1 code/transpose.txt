#include <stdio.h>
#include <stdlib.h>

#include "mpi.h"

#define M 1000

#define N 500

int main(int argc, char* argv[]) {
  int size, rank;

  int A[M][N];

  MPI_Init(&argc, &argv);

  MPI_Comm_size(MPI_COMM_WORLD, &size);

  MPI_Comm_rank(MPI_COMM_WORLD, &rank);

  if (rank == 0) {
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < N; j++) {
        A[i][j] = i + j;
      }
    }
  }
  int elems_per_process = M * N / size;
  int* process_arr = (int*)malloc(elems_per_process * sizeof(int));
  MPI_Scatter(A, elems_per_process, MPI_INT, process_arr, elems_per_process,
              MPI_INT, 0, MPI_COMM_WORLD);

  MPI_Alltoall(process_arr, elems_per_process / size, MPI_INT, process_arr,
               elems_per_process / size, MPI_INT, MPI_COMM_WORLD);

  MPI_Gather(process_arr, elems_per_process, MPI_INT, A, elems_per_process,
             MPI_INT, 0, MPI_COMM_WORLD);

  MPI_Finalize();

  return (0);
}